{"version":3,"sources":["actions/actions.js","reducers/reducers.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Link.js","containers/FilterLink.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ADD_TODO","TOGGLE_TODO","SET_VISIBILITY_FILTER","SHOW_ALL","todoApp","combineReducers","visibilityFilter","state","arguments","length","undefined","action","type","filter","todos","concat","Object","toConsumableArray","text","completed","map","todo","index","assign","AddTodo","_ref","input","dispatch","react_default","a","createElement","onSubmit","e","preventDefault","value","trim","ref","node","connect","Todo","onClick","style","textDecoration","TodoList","onTodoClick","components_Todo","key","id","getVisibleTodos","t","VisibleTodoList","Link","active","children","href","FilterLink","ownProps","onclick","Footer","containers_FilterLink","store","createStore","App","es","className","containers_AddTodo","containers_VisibleTodoList","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8210532c.chunk.js","sourcesContent":["/*\r\n * типы действий\r\n */\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\r\n\r\n/*\r\n * другие константы\r\n */\r\nexport const VisibilityFilters = {\r\n    SHOW_ALL: 'SHOW_ALL',\r\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n}\r\n\r\n/*\r\n * генераторы действий\r\n */\r\nexport function addTodo(text) {\r\n    return { type: ADD_TODO, text }\r\n}\r\n\r\nexport function toggleTodo(index) {\r\n    return { type: TOGGLE_TODO, index }\r\n}\r\n\r\nexport function setVisibilityFilter(filter) {\r\n    return { type: SET_VISIBILITY_FILTER, filter }\r\n}","import { combineReducers } from 'redux'\r\nimport { ADD_TODO, TOGGLE_TODO, SET_VISIBILITY_FILTER, VisibilityFilters } from '../actions/actions'\r\n\r\nconst { SHOW_ALL } = VisibilityFilters\r\n\r\nfunction visibilityFilter(state = SHOW_ALL, action) {\r\n    switch (action.type) {\r\n        case SET_VISIBILITY_FILTER:\r\n            return action.filter\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction todos(state = [], action) {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return [\r\n                ...state,\r\n                {\r\n                    text: action.text,\r\n                    completed: false\r\n                }\r\n            ]\r\n        case TOGGLE_TODO:\r\n            return state.map((todo, index) => {\r\n                if (index === action.index) {\r\n                        return Object.assign({}, todo, {\r\n                            completed: !todo.completed\r\n                    })\r\n                }\r\n                return todo\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst todoApp = combineReducers({\r\n    visibilityFilter,\r\n    todos\r\n})\r\n\r\nexport default todoApp","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTodo } from '../actions/actions'\r\n\r\nlet AddTodo = ({ dispatch }) => {\r\n    let input\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={e => {\r\n                e.preventDefault()\r\n                if (!input.value.trim()) {\r\n                    return\r\n                }\r\n                dispatch(addTodo(input.value))\r\n                input.value = ''\r\n            }}>\r\n                <input ref={node => {\r\n                    input = node\r\n                }} />\r\n                <button type=\"submit\">\r\n                    Add Todo\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddTodo = connect()(AddTodo)\r\n\r\nexport default AddTodo","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Todo = ({ onClick, completed, text }) => (\r\n    <li\r\n        onClick={onClick}\r\n        style={{ textDecoration: completed ? 'line-through' : 'none' }}\r\n    >\r\n        {text}\r\n    </li>\r\n)\r\n\r\nTodo.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n    completed: PropTypes.bool.isRequired,\r\n    text: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Todo","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, onTodoClick }) => (\r\n    <ul>\r\n        {todos.map(todo =>\r\n            <Todo\r\n                key={todo.id}\r\n                {...todo}\r\n                onClick={() => onTodoClick(todo.id)}\r\n            />\r\n        )}\r\n    </ul>\r\n)\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        completed: PropTypes.bool.isRequired,\r\n        text: PropTypes.string.isRequired\r\n    }).isRequired).isRequired,\r\n    onTodoClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import { connect } from 'react-redux'\r\nimport { toggleTodo } from '../actions/actions'\r\nimport TodoList from '../components/TodoList'\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n    switch (filter) {\r\n        case 'SHOW_ALL':\r\n            return todos\r\n        case 'SHOW_COMPLETED':\r\n            return todos.filter(t => t.completed)\r\n        case 'SHOW_ACTIVE':\r\n            return todos.filter(t => !t.completed)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTodoClick: (id) => {\r\n            dispatch(toggleTodo(id))\r\n        }\r\n    }\r\n}\r\n\r\nconst VisibleTodoList  = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoList)\r\n\r\nexport default VisibleTodoList","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Link = ({ active, children, onClick }) => {\r\n    if (active) {\r\n        return <span>{children}</span>\r\n    }\r\n\r\n    return (\r\n        <a href=\"#\"\r\n            onClick={e => {\r\n                e.preventDefault()\r\n                onClick()\r\n            }}\r\n        >\r\n            {children}\r\n        </a>\r\n    )\r\n}\r\n\r\nLink.propTypes = {\r\n    active: PropTypes.bool.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n  \r\nexport default Link","import { connect } from 'react-redux'\r\nimport { setVisibilityFilter } from '../actions/actions'\r\nimport Link from '../components/Link'\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        active: ownProps.filter === state.visibilityFilter\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onclick: () => {\r\n            dispatch(setVisibilityFilter(ownProps.filter))\r\n        }\r\n    }\r\n}\r\n\r\nconst FilterLink = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Link)\r\n\r\nexport default FilterLink","import React from 'react'\r\nimport FilterLink from '../containers/FilterLink'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <p>\r\n            Show:\r\n            {\" \"}\r\n            <FilterLink filter=\"SHOW_ALL\">\r\n                All\r\n            </FilterLink>\r\n            {\", \"}\r\n            <FilterLink filter=\"SHOW_ACTIVE\">\r\n                Active\r\n            </FilterLink>\r\n            {\", \"}\r\n            <FilterLink filter=\"SHOW_COMPLETED\">\r\n                Completed\r\n            </FilterLink>\r\n        </p>\r\n    )\r\n    \r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport todoApp from './reducers/reducers';\nimport './App.css';\n\nimport AddTodo from './containers/AddTodo';\nimport VisibleTodoList from './containers/VisibleTodoList';\nimport Footer from './components/Footer';\n\nconst initinitialState = {\n  todos: [\n    {\n      text: 'first',\n      completed: false\n    }\n  ]\n}\n\nlet store = createStore(todoApp, initinitialState);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AddTodo />\n          <VisibleTodoList />\n          <Footer />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}